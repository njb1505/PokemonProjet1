{"ast":null,"code":"export default class PokemonService {\n  // Aficcher tous les pokemons\n  static getPokemons() {\n    return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error));\n  }\n  static getPokemon(id) {\n    return fetch(`http://localhost:3001/pokemons/${id}`).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n    // si le pokemon demandé n'existe pas alors on renvoir la méthode isEmpty.\n  }\n\n  static updatePokemon(pokemon) {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(pokemon),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  //si une requete http n'a bouti pas alors retourne cette error.\n  static handleError(error) {\n    console.error(error);\n  }\n}","map":{"version":3,"names":["PokemonService","getPokemons","fetch","then","response","json","catch","error","handleError","getPokemon","id","data","isEmpty","updatePokemon","pokemon","method","body","JSON","stringify","headers","Object","keys","length","console"],"sources":["C:/Users/USER/Videos/PROGRAMMATION/Programmation web/JavaScript et ses frameworks/React Js/REACT-POKEMON-APP/src/services/pokemon-service.ts"],"sourcesContent":["\r\nimport Pokemon from \"../models/pokemon\";\r\n\r\n  \r\nexport default class PokemonService {\r\n  \r\n  // Aficcher tous les pokemons\r\n  static getPokemons(): Promise<Pokemon[]> {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json()) \r\n      .catch(error => this.handleError(error)); \r\n  }\r\n  \r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    \r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error)); \r\n      // si le pokemon demandé n'existe pas alors on renvoir la méthode isEmpty.\r\n  }\r\n\r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n\r\n\r\n\r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  //si une requete http n'a bouti pas alors retourne cette error.\r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n\r\n}"],"mappings":"AAIA,eAAe,MAAMA,cAAc,CAAC;EAElC;EACA,OAAOC,WAAWA,CAAA,EAAuB;IACrC,OAAOC,KAAK,CAAC,gCAAgC,CAAC,CAC7CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;EAC5C;EAGA,OAAOE,UAAUA,CAACC,EAAU,EAAyB;IAEjD,OAAOR,KAAK,CAAE,kCAAiCQ,EAAG,EAAC,CAAC,CACnDP,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACQ,IAAI,IAAI,IAAI,CAACC,OAAO,CAACD,IAAI,CAAC,GAAG,IAAI,GAAGA,IAAI,CAAC,CAC9CL,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;IACxC;EACJ;;EAEA,OAAOM,aAAaA,CAACC,OAAgB,EAAoB;IACrD,OAAOZ,KAAK,CAAE,kCAAiCY,OAAO,CAACJ,EAAG,EAAC,EAAE;MAC3DK,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC;MAC7BK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAC/C,CAAC,CAAC,CACDhB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;EAC1C;EAIF,OAAOK,OAAOA,CAACD,IAAY,EAAW;IACpC,OAAOS,MAAM,CAACC,IAAI,CAACV,IAAI,CAAC,CAACW,MAAM,KAAK,CAAC;EACvC;;EAEA;EACA,OAAOd,WAAWA,CAACD,KAAY,EAAQ;IACrCgB,OAAO,CAAChB,KAAK,CAACA,KAAK,CAAC;EACtB;AAEF"},"metadata":{},"sourceType":"module"}