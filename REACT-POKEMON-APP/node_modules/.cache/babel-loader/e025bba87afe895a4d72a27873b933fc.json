{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Videos\\\\PROGRAMMATION\\\\Programmation web\\\\JavaScript et ses frameworks\\\\React Js\\\\REACT-POKEMON-APP\\\\src\\\\components\\\\pokemon-form.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport formatType from '../helpers/format-type';\n/**---------------------------------------------- */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//1. Nous avons déclaré deux types qui vont nous aider pour l'initialisation des valeurs de nos pokemons dans les inputs.\n//2. Le type Field: pour modeliser un champ dans notre formulaire. Chaque champ aura une valeur, une erreur potentiel et une proprieté indiquant si la donnée saisie est valide ou non. \n//3. Le type Form: represente le formulaire avec les différents champs disponible.\n/**---------------------------------------------- */\nconst PokemonForm = ({\n  pokemon\n}) => {\n  _s();\n  /**----------------------------------------------*/\n  const [form, setForm] = useState({\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  }); //ces valeurs seront envoyées dans le value de chaque input\n  /**--------------------------------------------- */\n  const history = useHistory();\n  /**--------------------------------------------- */\n\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy']; //Ici on déclare une const 'types' qui contient tous les types de pokemon disponible afin de les afficher dans le formulaire.\n  //En effet il faudra permettre aux users d'attribuer des types aux pokemons editer.\n\n  /**---------------------------------------------- */\n  const hasType = type => {\n    return form.types.value.includes(type);\n  }; //Gestion des valeurs de types de pokemons pour les inputs. \n  //Cette méthode renvoie un boolean pour savoir si le type d'un pokemon appartient ou non à ce pokemon.\n\n  /**---------------------------------------------- */\n  const handleInputChange = e => {\n    const fieldName = e.target.name; //c'est le nom du champs à modifier  \n    const fieldValue = e.target.value; //c'est la nouvelle valeur saisie par l'utilisateur\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    }; //ici on regroupe les modifications du champs dans newField\n\n    setForm({\n      ...form,\n      ...newField\n    }); //on modife l'état de notre formulaire grace à la méthode seform. \n  };\n  //Le role de cette méthode est de regair à l'action de l'user à chaque fois qu'il va modifier les données des champs (name, points de vie ou dégats du pokemon).\n  /**--------------------------------------------- */\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n    let newField;\n    if (checked) {\n      //si l'user coche un type, on l'ajoute à la liste des types du pokemon.\n      const newTypes = form.types.value.concat([type]);\n      newField = {\n        value: newTypes\n      };\n    } else {\n      //si l'user décoche un type, on le retire de la liste des types du pokémon. \n\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      newField = {\n        value: newTypes\n      };\n    }\n    setForm({\n      ...form,\n      ...{\n        types: newField\n      }\n    });\n  }; //Gestion de l'edition des types. \n\n  /**---------------------------------------------*/\n  const validateForm = () => {\n    let newForm = form;\n\n    //Validator name\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg = 'Le nom du pokémon est requis (1-25).';\n      const newfield = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = {\n        ...newForm,\n        ...{\n          name: newfield\n        }\n      };\n    } else {\n      const newfield = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = {\n        ...newForm,\n        ...{\n          name: newfield\n        }\n      };\n    }\n    //^[a-zA-Zàéè ]{3,25}$/: veut dire, je n'accepte que des chaines de caractère de 3 à 25 caractère de long qui ne peuvent contenir de lettres minuscule et majuscule ains que èéà.\n\n    //Validator hp\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999';\n      const newfield = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = {\n        ...newForm,\n        ...{\n          hp: newfield\n        }\n      };\n    } else {\n      const newfield = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = {\n        ...newForm,\n        ...{\n          hp: newfield\n        }\n      };\n    }\n    ///^[0-9]{1,3}$/: je ne veux que des chiffres mais la limite c'est trois chiffre de long.ex: 1,15,150\n\n    //Validator cp\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999';\n      const newfield = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = {\n        ...newForm,\n        ...{\n          hp: newfield\n        }\n      };\n    } else {\n      const newfield = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = {\n        ...newForm,\n        ...{\n          hp: newfield\n        }\n      };\n    }\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n    //ici on regarde si notre formulaire est valide ou non  et on retourne un boolean si on retourne vrai ce que les données sont valide sinon on ne fera rien.\n  };\n  //1.Gestion des validations des données du formulaire.\n  //2. Pour tester la validité d'un champ par rapport à un regex on utilise la méthode 'test'\n  /**---------------------------------------------*/\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n    if (isFormValid) {\n      history.push(`/pokemons/${pokemon.id}`);\n    }\n  }; //Gère le comportement de soumission du formulaire\n  /**----------------------------------------------*/\n\n  const istTypesvalid = type => {\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n      // si l'user a selectionné une seule case il faut l'empecher de la déselectionner.\n    }\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n      // si l'user a déja seclectionné 3 cases alors il faut l'empecher de pouvoir selectionner d'autres cases.Mais il peut déselectionner les types deja présent pour pouvoir modifier un pokemon.\n    }\n\n    return true;\n  };\n  //Gestion des validations du champs type.\n\n  /**---------------------------------------------*/\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col s12 m8 offset-m2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card hoverable\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-image\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pokemon.picture,\n              alt: pokemon.name,\n              style: {\n                width: '250px',\n                margin: '0 auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-stacked\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"name\",\n                  children: \"Nom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"name\",\n                  name: \"name\",\n                  type: \"text\",\n                  className: \"form-control\",\n                  value: form.name.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 19\n                }, this), form.name.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-panel red acdcent-1\",\n                  children: form.name.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"hp\",\n                  children: \"Point de vie\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"hp\",\n                  name: \"hp\",\n                  type: \"number\",\n                  className: \"form-control\",\n                  value: form.hp.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 19\n                }, this), form.hp.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-panel red acdcent-1\",\n                  children: form.hp.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"cp\",\n                  children: \"D\\xE9g\\xE2ts\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"cp\",\n                  name: \"cp\",\n                  type: \"number\",\n                  className: \"form-control\",\n                  value: form.cp.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 19\n                }, this), form.cp.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-panel red acdcent-1\",\n                  children: form.cp.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Types\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 19\n                }, this), types.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    marginBottom: '10px'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      id: type,\n                      type: \"checkbox\",\n                      className: \"filled-in\",\n                      value: type,\n                      disabled: !istTypesvalid(type),\n                      checked: hasType(type),\n                      onChange: e => selectType(type, e)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 206,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: formatType(type),\n                        children: type\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 209,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 208,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 23\n                  }, this)\n                }, type, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-action center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn\",\n                children: \"Valider\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(PokemonForm, \"440iyFHuFA8CmphmCGXPcsAIok8=\", false, function () {\n  return [useHistory];\n});\n_c = PokemonForm;\nexport default PokemonForm;\nvar _c;\n$RefreshReg$(_c, \"PokemonForm\");","map":{"version":3,"names":["React","useState","useHistory","formatType","jsxDEV","_jsxDEV","PokemonForm","pokemon","_s","form","setForm","name","value","isValid","hp","cp","types","history","hasType","type","includes","handleInputChange","e","fieldName","target","fieldValue","newField","selectType","checked","newTypes","concat","filter","currentType","validateForm","newForm","test","errorMsg","newfield","error","handleSubmit","preventDefault","isFormValid","push","id","istTypesvalid","length","onSubmit","children","className","src","picture","alt","style","width","margin","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","map","marginBottom","disabled","_c","$RefreshReg$"],"sources":["C:/Users/USER/Videos/PROGRAMMATION/Programmation web/JavaScript et ses frameworks/React Js/REACT-POKEMON-APP/src/components/pokemon-form.tsx"],"sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\n/**---------------------------------------------- */\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon\r\n}; \r\n\r\n\r\ntype Field = {\r\n  value: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n}\r\n\r\ntype Form = {\r\n  name:Field,\r\n  hp: Field,\r\n  cp: Field,\r\n  types: Field\r\n}\r\n//1. Nous avons déclaré deux types qui vont nous aider pour l'initialisation des valeurs de nos pokemons dans les inputs.\r\n//2. Le type Field: pour modeliser un champ dans notre formulaire. Chaque champ aura une valeur, une erreur potentiel et une proprieté indiquant si la donnée saisie est valide ou non. \r\n//3. Le type Form: represente le formulaire avec les différents champs disponible.\r\n\r\n/**---------------------------------------------- */\r\n\r\n\r\n  \r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\r\n  /**----------------------------------------------*/\r\n  const [form, setForm] = useState<Form>({\r\n      name: {value:pokemon.name, isValid:true},\r\n      hp: {value:pokemon.hp, isValid:true},\r\n      cp: {value:pokemon.cp, isValid:true},\r\n      types: {value:pokemon.types, isValid:true},\r\n  });//ces valeurs seront envoyées dans le value de chaque input\r\n /**--------------------------------------------- */\r\n const history = useHistory();\r\n  /**--------------------------------------------- */\r\n\r\n  const types: string[] = [\r\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n  ];//Ici on déclare une const 'types' qui contient tous les types de pokemon disponible afin de les afficher dans le formulaire.\r\n  //En effet il faudra permettre aux users d'attribuer des types aux pokemons editer.\r\n\r\n/**---------------------------------------------- */\r\n  const hasType = (type: string): boolean =>{\r\n    return form.types.value.includes(type);\r\n  }//Gestion des valeurs de types de pokemons pour les inputs. \r\n  //Cette méthode renvoie un boolean pour savoir si le type d'un pokemon appartient ou non à ce pokemon.\r\n\r\n/**---------------------------------------------- */\r\n  const handleInputChange = (e:React.ChangeEvent<HTMLInputElement>) =>{\r\n    const fieldName: string = e.target.name;//c'est le nom du champs à modifier  \r\n    const fieldValue: string = e.target.value; //c'est la nouvelle valeur saisie par l'utilisateur\r\n    const newField = {[fieldName]: { value: fieldValue  }};//ici on regroupe les modifications du champs dans newField\r\n\r\n    setForm({...form, ...newField});//on modife l'état de notre formulaire grace à la méthode seform. \r\n  }\r\n  //Le role de cette méthode est de regair à l'action de l'user à chaque fois qu'il va modifier les données des champs (name, points de vie ou dégats du pokemon).\r\n  /**--------------------------------------------- */\r\n\r\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void =>{\r\n    const checked = e.target.checked;\r\n    let newField: Field;\r\n\r\n    if (checked){\r\n      //si l'user coche un type, on l'ajoute à la liste des types du pokemon.\r\n      const newTypes: string[] = form.types.value.concat([type]);\r\n      newField = { value: newTypes }\r\n    } else {\r\n      //si l'user décoche un type, on le retire de la liste des types du pokémon. \r\n\r\n      const newTypes: string[] = form.types.value.filter((currentType: string)=> currentType !== type);\r\n      newField = { value: newTypes };\r\n    }\r\n    setForm({...form, ...{types: newField}});\r\n  }//Gestion de l'edition des types. \r\n\r\n  \r\n\r\n   /**---------------------------------------------*/\r\n   const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    //Validator name\r\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n      const newfield: Field = {value: form.name.value, error: errorMsg, isValid: false};\r\n      newForm = {...newForm, ...{name: newfield} };   \r\n  }else{\r\n    const newfield: Field ={value: form.name.value, error: '', isValid: true}; \r\n    newForm = {...newForm, ...{name: newfield}}\r\n  }\r\n  //^[a-zA-Zàéè ]{3,25}$/: veut dire, je n'accepte que des chaines de caractère de 3 à 25 caractère de long qui ne peuvent contenir de lettres minuscule et majuscule ains que èéà.\r\n\r\n\r\n     //Validator hp\r\n     if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999';\r\n      const newfield: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n      newForm = {...newForm, ...{hp: newfield}} \r\n  }else{\r\n    const newfield: Field ={value: form.hp.value, error: '', isValid: true}; \r\n    newForm = {...newForm, ...{hp: newfield}}\r\n  }\r\n   ///^[0-9]{1,3}$/: je ne veux que des chiffres mais la limite c'est trois chiffre de long.ex: 1,15,150\r\n\r\n\r\n    //Validator cp\r\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999';\r\n      const newfield: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n      newForm = {...newForm, ...{hp: newfield}} \r\n  }else{\r\n    const newfield: Field ={value: form.hp.value, error: '', isValid: true}; \r\n    newForm = {...newForm, ...{hp: newfield}};\r\n  }\r\n  setForm(newForm);\r\n  return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n  //ici on regarde si notre formulaire est valide ou non  et on retourne un boolean si on retourne vrai ce que les données sont valide sinon on ne fera rien.\r\n}\r\n//1.Gestion des validations des données du formulaire.\r\n//2. Pour tester la validité d'un champ par rapport à un regex on utilise la méthode 'test'\r\n   /**---------------------------------------------*/\r\n\r\n   \r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid){\r\n      history.push(`/pokemons/${pokemon.id}`);\r\n    }\r\n  }//Gère le comportement de soumission du formulaire\r\n  /**----------------------------------------------*/\r\n\r\n   const istTypesvalid = (type: string): boolean =>{\r\n    if (form.types.value.length === 1 && hasType(type)){\r\n      return false;\r\n     // si l'user a selectionné une seule case il faut l'empecher de la déselectionner.\r\n    }\r\n    if (form.types.value.length >= 3 && !hasType(type)){\r\n      return false;\r\n      // si l'user a déja seclectionné 3 cases alors il faut l'empecher de pouvoir selectionner d'autres cases.Mais il peut déselectionner les types deja présent pour pouvoir modifier un pokemon.\r\n    }\r\n    return true;\r\n   }\r\n   //Gestion des validations du champs type.\r\n   \r\n\r\n   /**---------------------------------------------*/\r\n\r\n  return (\r\n    <form onSubmit={e=>handleSubmit}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\"> \r\n            <div className=\"card-image\">\r\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n            </div>\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nom</label>\r\n                  <input id=\"name\" name='name' type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* le message d'erreur */}\r\n                  {form.name.error &&\r\n                    <div className='card-panel red acdcent-1'>\r\n                        {form.name.error}\r\n                    </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"hp\">Point de vie</label>\r\n                  <input id=\"hp\" name='hp' type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* le message d'erreur */}\r\n                  {form.hp.error &&\r\n                    <div className='card-panel red acdcent-1'>\r\n                        {form.hp.error}\r\n                    </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cp\">Dégâts</label>\r\n                  <input id=\"cp\" name='cp' type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* le message d'erreur */}\r\n                  {form.cp.error &&\r\n                    <div className='card-panel red acdcent-1'>\r\n                        {form.cp.error}\r\n                    </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                  <label>Types</label>\r\n                  {types.map(type => (\r\n                    <div key={type} style={{marginBottom: '10px'}}>\r\n                      <label>\r\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!istTypesvalid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\r\n                        {/* !istTypesvalid = si le type n'est pas valide on le véroue */}\r\n                        <span>\r\n                          <p className={formatType(type)}>{ type }</p>\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n   \r\nexport default PokemonForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}